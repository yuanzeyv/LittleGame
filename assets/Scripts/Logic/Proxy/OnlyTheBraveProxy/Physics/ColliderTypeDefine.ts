/*
游戏中的所有信息由两个类型（Type）进行控制，通过Type来判断这个道具是 组控制器（无物理实体） 或 物理实体对象
1:表示当前的道具类型是一个组控制器，其可以依据组控制器的规则容纳更多的主控制器 与 物理实体信息
0:物理实体对象可能是一个怪物、可能是一个障碍、也可能是一个奖励，总之物理实体根据其物理实体ID来赋予与之对应的逻辑信息。

问:为什么在物理游戏中，要添加组控制器这一个抽象的游戏逻辑呢？
1:出于对游戏性能的考虑，我不太希望游戏在生成时，就立即创建出所有的物理对象，这样会白白浪费掉大量的游戏内存与运算逻辑。
2:对游戏赋予更多的可玩性，以及更多的运行逻辑，让玩家拥有更好的游戏体验。

组控制器分为三种:
与控制器    :只要有一个角色的状态为假，这个控制器便会立即被销毁，其关联的所有子控制器也将一并被销毁。并告诉上层控制器对象，控制器的状态为假
或控制器    :当或控制下监听的所有控制器内容全部被销毁，或者返回假，控制器会立即销毁所有其子控制器下的对象，并高数商城控制器的状态为假。
条件控制器  :条件控制器会在被生成时，立即会创建出与条件控制器所关联的状态对象，之后当条件控制器中的状态对象的状态变更为假时，销毁条件状态控制器原有的对象，并将条件控制器降级为关联对象

控制组:
1:名称:与控制器
  功能:可以容纳所有的控制器元素 以及 物理对象元素。与控制器会监听所有已经生成的元素的状态，当由任何一个元素的状态变更为假（死亡）时，与控制器便会删除其下的所有的节点信息。
2:名称:或控制器:
  功能:或控制器可以容纳所有的控制器元素 以及 物理对象元素。或控制器会在每次对象的状态发生变动的时候，监听一下当前自己控制器下的长度信息，当长度信息为0的时候，代表或控制器消亡，此时或控制器会向上级返回死亡状态。
3:名称:条件控制器
    功能:条件控制器有两个条件，A:控制条件，B:生成对象，条件控制器会在生成时，创建A控制条件对象，当控制条件的元素死亡时，条件控制器会创建对应的B对象，进行生成。

通用物理基础组件:
1:阻拦单元
2:速度控制单元 
3:怪物单元
4:奖励单元
5:触发器单元:通常结合条件控制器，利用触发器单元触碰即销毁的特性，来创建指定的元素
6:角色单元:游戏场景中，玩家控制的主要就饿色

物理基础组件:
1:是否移动组件 Move:{IsPingPong:true,MoveTime:0.2,Vec:{X:0.2，Y:0.2}
2:是否奖励速度 AwardSpeed:{Duration:1,Vec:{X:0.2,Y:0.2}}
3:是否奖励属性 AwardAttr:[{Key:1,Value:2}]
*/
export let GPhysicsPantographRatio = 5;

export enum ePlayerType{
    Barrier = 1,//障碍物类型
    Move = 2,//移动组件类型
    Detection = 3,//摄像头组件类型
};
export enum eColliderType{
    Detection = 0,//探测类型
    Hero = 1,//英雄碰撞类型
    Enemy = 2,//敌人碰撞类型
    Neutrality = 3,//中立碰撞类型
};

/*
*障碍物类型
*/
export enum eCommonBodyDescType{
    Barrier     = 1,//障碍物类型
    Hero        = 2,//英雄类型
    HeroBullet  = 3,//英雄子弹类型
    Enemy       = 4,//敌人类型
    EnemyBullet = 5,//敌人子弹类型
}
/*
*移动类型
*/
export enum eMoveControlType{
    Normal = 1,//通用的障碍物类型 
}
/*
*摄像机类型
*/
export enum eVisualFieldDetectionType{
    Hero = 1,//探测英雄
    Enemy = 2,//探测敌人
    Neutrality = 3,//探测中立元素
    HeroAndEnemy = 4,//探测英雄 与 敌人
    HeroAndNeutrality = 5,//探测英雄与中立
    EnemyAndNeutrality = 6,//敌人与中立
    ALL = 7,//所有人
}