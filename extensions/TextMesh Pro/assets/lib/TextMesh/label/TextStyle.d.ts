import { Color } from "cc";
import { TMFont } from "../font/TMFont";
import { EScriptType } from "./types";
export declare enum ECornerType {
    LT = 0,
    RT = 1,
    LB = 2,
    RB = 3
}
export declare class TextStyle {
    [key: string]: any;
    private _$color;
    private _$colorLT;
    private _$colorLB;
    private _$colorRT;
    private _$colorRB;
    private _$shadow;
    private _$shadowColor;
    private _$shadowX;
    private _$shadowY;
    private _$shadowBlur;
    private _$stroke;
    private _$strokeBlur;
    private _$strokeColor;
    private _$backgroundColor;
    private _$maskColor;
    private _$fontSize;
    private _$dilate;
    private _$scriptType;
    private _$strike;
    private _$strikeColor;
    private _$underline;
    private _$underlineColor;
    private _$italic;
    private _$background;
    private _$mask;
    private _tmFont;
    private _fontSize;
    private _dilate;
    private _background;
    private _mask;
    private _italic;
    private _scriptType;
    private _strike;
    private _strikeRGBA;
    private _underline;
    private _underlineRGBA;
    private _fillRGBA;
    private _enableColorLT;
    private _enableColorLB;
    private _enableColorRT;
    private _enableColorRB;
    private _colorLT;
    private _colorLB;
    private _colorRT;
    private _colorRB;
    private _strokeRGBA;
    private _shadowRGBA;
    private _backgroundRGBA;
    private _maskRGBA;
    private _stroke;
    private _strokeBlur;
    private _gamma;
    private _shadow;
    private _shadowBlur;
    private _shadowOffsetX;
    private _shadowOffsetY;
    private _realFontSize;
    constructor(tmFont?: TMFont);
    get font(): TMFont;
    set font(value: TMFont);
    get realFontSize(): number;
    reset(): void;
    clone(): TextStyle;
    copyFrom(from: TextStyle, onlyChanged?: boolean): this;
    static copy(from: TextStyle): TextStyle;
    private calcFontSize;
    private getColor;
    preset(): void;
    calculate(): void;
    private calcGamma;
    get fontSize(): number;
    setFontSize(fontSize: number, focus?: boolean): void;
    get shadow(): number;
    setShadow(value: number, focus?: boolean): void;
    get shadowOffsetX(): number;
    setShadowOffsetX(value: number, focus?: boolean): void;
    get shadowOffsetY(): number;
    setShadowOffsetY(value: number, focus?: boolean): void;
    get fillRGBA(): Color;
    /**
     * 设置文本颜色
     * @param color
     * @param focus 如果为false，且颜色未通过样式设置过时，才可以改变
     */
    setFillColor(color: Color, focus?: boolean): void;
    get enableColorLB(): boolean;
    set enableColorLB(value: boolean);
    get enableColorLT(): boolean;
    set enableColorLT(value: boolean);
    get enableColorRB(): boolean;
    set enableColorRB(value: boolean);
    get enableColorRT(): boolean;
    set enableColorRT(value: boolean);
    getFillColor(corner: ECornerType): Color;
    get colorLB(): Color;
    setColorLB(color: Color, focus?: boolean): void;
    get colorLT(): Color;
    setColorLT(color: Color, focus?: boolean): void;
    get colorRB(): Color;
    setColorRB(color: Color, focus?: boolean): void;
    get colorRT(): Color;
    setColorRT(color: Color, focus?: boolean): void;
    get strokeRGBA(): Color;
    setStrokeColor(color: Color, focus?: boolean): void;
    get shadowRGBA(): Color;
    setShadowColor(color: Color, focus?: boolean): void;
    get backgroundRGBA(): Color;
    setBackgroundColor(color: Color, focus?: boolean): void;
    get maskRGBA(): Color;
    setMaskColor(color: Color, focus?: boolean): void;
    get dilate(): number;
    setDilate(value: number, focus?: boolean): void;
    get stroke(): number;
    setStroke(value: number, focus?: boolean): void;
    get strokeBlur(): number;
    setStrokeBlur(value: number, focus?: boolean): void;
    get gamma(): number;
    get background(): boolean;
    setBackground(value: boolean, focus?: boolean): void;
    get mask(): boolean;
    setMask(value: boolean, focus?: boolean): void;
    get shadowBlur(): number;
    setShadowBlur(value: number, focus?: boolean): void;
    get italic(): boolean;
    setItalic(value: boolean, focus?: boolean): void;
    get scriptType(): EScriptType;
    setScriptType(value: EScriptType, focus?: boolean): void;
    get strike(): boolean;
    setStrike(value: boolean, focus?: boolean): void;
    get strikeRGBA(): Color;
    setStrikeColor(color: Color, focus?: boolean): void;
    get underline(): boolean;
    setUnderline(value: boolean, focus?: boolean): void;
    get underlineRGBA(): Color;
    setUnderlineColor(color: Color, focus?: boolean): void;
    private setAttributeFromObject;
    parseFromJson(json: object): void;
    parseFromJsonStr(style: string): void;
}
