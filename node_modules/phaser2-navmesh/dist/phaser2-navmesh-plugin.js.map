{"version":3,"sources":["webpack://Phaser2NavMeshPlugin/webpack/universalModuleDefinition","webpack://Phaser2NavMeshPlugin/../node_modules/javascript-astar/astar.js","webpack://Phaser2NavMeshPlugin/webpack/bootstrap","webpack://Phaser2NavMeshPlugin/webpack/runtime/compat get default export","webpack://Phaser2NavMeshPlugin/webpack/runtime/define property getters","webpack://Phaser2NavMeshPlugin/webpack/runtime/hasOwnProperty shorthand","webpack://Phaser2NavMeshPlugin/webpack/runtime/make namespace object","webpack://Phaser2NavMeshPlugin/../node_modules/ts-loader/navmesh/src/math/vector-2.ts","webpack://Phaser2NavMeshPlugin/../node_modules/ts-loader/navmesh/src/navpoly.ts","webpack://Phaser2NavMeshPlugin/../node_modules/ts-loader/navmesh/src/utils.ts","webpack://Phaser2NavMeshPlugin/../node_modules/ts-loader/navmesh/src/channel.ts","webpack://Phaser2NavMeshPlugin/../node_modules/ts-loader/navmesh/src/math/line.ts","webpack://Phaser2NavMeshPlugin/../node_modules/ts-loader/navmesh/src/math/polygon.ts","webpack://Phaser2NavMeshPlugin/./phaser2-navmesh.ts","webpack://Phaser2NavMeshPlugin/../node_modules/ts-loader/navmesh/src/navmesh.ts","webpack://Phaser2NavMeshPlugin/../node_modules/ts-loader/navmesh/src/navgraph.ts","webpack://Phaser2NavMeshPlugin/./phaser2-navmesh-plugin.ts","webpack://Phaser2NavMeshPlugin/./index.ts"],"names":["root","factory","exports","module","define","amd","self","definition","pathTo","node","curr","path","parent","unshift","astar","search","graph","start","end","options","cleanDirty","heuristic","heuristics","manhattan","closest","openHeap","BinaryHeap","f","closestNode","h","markDirty","push","size","currentNode","pop","closed","neighbors","i","il","length","neighbor","isWall","gScore","g","getCost","beenVisited","visited","rescoreElement","pos0","pos1","Math","abs","x","y","diagonal","D2","sqrt","d1","d2","min","cleanNode","Graph","gridIn","this","nodes","grid","row","GridNode","init","weight","scoreFunction","content","prototype","dirtyNodes","ret","toString","graphString","rowDebug","join","fromNeighbor","element","sinkDown","result","bubbleUp","remove","indexOf","n","parentN","elemScore","child1Score","child2N","child1N","swap","child1","child2","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","getter","__esModule","d","a","key","o","Object","defineProperty","enumerable","get","obj","prop","hasOwnProperty","call","r","Symbol","toStringTag","value","Vector2","v","atan2","dx","dy","NavPoly","id","polygon","edges","portals","centroid","calculateCentroid","boundingRadius","calculateRadius","points","point","contains","isPointOnEdge","forEach","p","add","distance","edge","pointOnSegment","navPolygon","centroidDistance","projectPointToEdge","line","b","l2","distanceSquared","t","triarea2","c","ax","ay","almostEqual","value1","value2","errorMargin","angleDifference","PI","j","floor","areCollinear","line1","line2","area1","area2","Channel","p1","p2","left","right","pts","apexIndex","leftIndex","rightIndex","portalApex","portalLeft","portalRight","equals","Line","x1","y1","x2","y2","max","top","bottom","pointOnLine","Polygon","isClosed","first","last","inside","ix","iy","jx","jy","Phaser2NavMesh","plugin","meshPolygonPoints","meshShrinkAmount","game","debugGraphics","navMesh","newPolys","map","polyPoints","vectors","navPolygons","calculateNeighbors","navPolygon1","navPolygon2","destroy","poly","some","navPoly","maxAllowableDist","Number","POSITIVE_INFINITY","minDistance","closestPoly","pointOnClosestPoly","projectPointToPolygon","startPoint","endPoint","startPoly","endPoly","startDistance","MAX_VALUE","endDistance","startVector","endVector","astarPath","navHeuristic","channel","nextNavPolygon","portal","Error","stringPull","lastPoint","phaserPath","newPoint","clone","otherNavPoly","otherEdge","overlap","getSegmentOverlap","edgeStartAngle","angle","a1","a2","sort","noOverlap","singlePointOverlap","closestProjection","closestDistance","projectedPoint","isPointInMesh","PointClass","Phaser","Point","findPath","graphics","visible","clear","drawCentroid","drawBounds","drawNeighbors","drawPortals","palette","getPolygons","color","lineWidth","beginFill","drawPolygon","getPoints","endFill","drawEllipse","lineStyle","moveTo","lineTo","thickness","alpha","drawShape","removeMesh","Phaser2NavMeshPlugin","Plugin","pluginManager","super","removeAllMeshes","meshes","values","phaserNavMeshes","m","objectLayer","console","warn","polygons","height","width","mesh"],"mappings":"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","file":"phaser2-navmesh-plugin.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Phaser2NavMeshPlugin\"] = factory();\n\telse\n\t\troot[\"Phaser2NavMeshPlugin\"] = factory();\n})(self, function() {\nreturn ","// javascript-astar 0.4.2\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n(function(definition) {\n  /* global module, define */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = definition();\n  } else if (typeof define === 'function' && define.amd) {\n    define([], definition);\n  } else {\n    var exports = definition();\n    window.astar = exports.astar;\n    window.Graph = exports.Graph;\n  }\n})(function() {\n\nfunction pathTo(node) {\n  var curr = node;\n  var path = [];\n  while (curr.parent) {\n    path.unshift(curr);\n    curr = curr.parent;\n  }\n  return path;\n}\n\nfunction getHeap() {\n  return new BinaryHeap(function(node) {\n    return node.f;\n  });\n}\n\nvar astar = {\n  /**\n  * Perform an A* Search on a graph given a start and end node.\n  * @param {Graph} graph\n  * @param {GridNode} start\n  * @param {GridNode} end\n  * @param {Object} [options]\n  * @param {bool} [options.closest] Specifies whether to return the\n             path to the closest node if the target is unreachable.\n  * @param {Function} [options.heuristic] Heuristic function (see\n  *          astar.heuristics).\n  */\n  search: function(graph, start, end, options) {\n    graph.cleanDirty();\n    options = options || {};\n    var heuristic = options.heuristic || astar.heuristics.manhattan;\n    var closest = options.closest || false;\n\n    var openHeap = getHeap();\n    var closestNode = start; // set the start node to be the closest if required\n\n    start.h = heuristic(start, end);\n    graph.markDirty(start);\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      var currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        return pathTo(currentNode);\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbors.\n      currentNode.closed = true;\n\n      // Find all neighbors for the current node.\n      var neighbors = graph.neighbors(currentNode);\n\n      for (var i = 0, il = neighbors.length; i < il; ++i) {\n        var neighbor = neighbors[i];\n\n        if (neighbor.closed || neighbor.isWall()) {\n          // Not a valid node to process, skip to next neighbor.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n        var gScore = currentNode.g + neighbor.getCost(currentNode);\n        var beenVisited = neighbor.visited;\n\n        if (!beenVisited || gScore < neighbor.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbor.visited = true;\n          neighbor.parent = currentNode;\n          neighbor.h = neighbor.h || heuristic(neighbor, end);\n          neighbor.g = gScore;\n          neighbor.f = neighbor.g + neighbor.h;\n          graph.markDirty(neighbor);\n          if (closest) {\n            // If the neighbour is closer than the current closestNode or if it's equally close but has\n            // a cheaper path than the current closest node then it becomes the closest node\n            if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n              closestNode = neighbor;\n            }\n          }\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbor);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbor);\n          }\n        }\n      }\n    }\n\n    if (closest) {\n      return pathTo(closestNode);\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  },\n  // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n  heuristics: {\n    manhattan: function(pos0, pos1) {\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return d1 + d2;\n    },\n    diagonal: function(pos0, pos1) {\n      var D = 1;\n      var D2 = Math.sqrt(2);\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));\n    }\n  },\n  cleanNode: function(node) {\n    node.f = 0;\n    node.g = 0;\n    node.h = 0;\n    node.visited = false;\n    node.closed = false;\n    node.parent = null;\n  }\n};\n\n/**\n * A graph memory structure\n * @param {Array} gridIn 2D array of input weights\n * @param {Object} [options]\n * @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed\n */\nfunction Graph(gridIn, options) {\n  options = options || {};\n  this.nodes = [];\n  this.diagonal = !!options.diagonal;\n  this.grid = [];\n  for (var x = 0; x < gridIn.length; x++) {\n    this.grid[x] = [];\n\n    for (var y = 0, row = gridIn[x]; y < row.length; y++) {\n      var node = new GridNode(x, y, row[y]);\n      this.grid[x][y] = node;\n      this.nodes.push(node);\n    }\n  }\n  this.init();\n}\n\nGraph.prototype.init = function() {\n  this.dirtyNodes = [];\n  for (var i = 0; i < this.nodes.length; i++) {\n    astar.cleanNode(this.nodes[i]);\n  }\n};\n\nGraph.prototype.cleanDirty = function() {\n  for (var i = 0; i < this.dirtyNodes.length; i++) {\n    astar.cleanNode(this.dirtyNodes[i]);\n  }\n  this.dirtyNodes = [];\n};\n\nGraph.prototype.markDirty = function(node) {\n  this.dirtyNodes.push(node);\n};\n\nGraph.prototype.neighbors = function(node) {\n  var ret = [];\n  var x = node.x;\n  var y = node.y;\n  var grid = this.grid;\n\n  // West\n  if (grid[x - 1] && grid[x - 1][y]) {\n    ret.push(grid[x - 1][y]);\n  }\n\n  // East\n  if (grid[x + 1] && grid[x + 1][y]) {\n    ret.push(grid[x + 1][y]);\n  }\n\n  // South\n  if (grid[x] && grid[x][y - 1]) {\n    ret.push(grid[x][y - 1]);\n  }\n\n  // North\n  if (grid[x] && grid[x][y + 1]) {\n    ret.push(grid[x][y + 1]);\n  }\n\n  if (this.diagonal) {\n    // Southwest\n    if (grid[x - 1] && grid[x - 1][y - 1]) {\n      ret.push(grid[x - 1][y - 1]);\n    }\n\n    // Southeast\n    if (grid[x + 1] && grid[x + 1][y - 1]) {\n      ret.push(grid[x + 1][y - 1]);\n    }\n\n    // Northwest\n    if (grid[x - 1] && grid[x - 1][y + 1]) {\n      ret.push(grid[x - 1][y + 1]);\n    }\n\n    // Northeast\n    if (grid[x + 1] && grid[x + 1][y + 1]) {\n      ret.push(grid[x + 1][y + 1]);\n    }\n  }\n\n  return ret;\n};\n\nGraph.prototype.toString = function() {\n  var graphString = [];\n  var nodes = this.grid;\n  for (var x = 0; x < nodes.length; x++) {\n    var rowDebug = [];\n    var row = nodes[x];\n    for (var y = 0; y < row.length; y++) {\n      rowDebug.push(row[y].weight);\n    }\n    graphString.push(rowDebug.join(\" \"));\n  }\n  return graphString.join(\"\\n\");\n};\n\nfunction GridNode(x, y, weight) {\n  this.x = x;\n  this.y = y;\n  this.weight = weight;\n}\n\nGridNode.prototype.toString = function() {\n  return \"[\" + this.x + \" \" + this.y + \"]\";\n};\n\nGridNode.prototype.getCost = function(fromNeighbor) {\n  // Take diagonal weight into consideration.\n  if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n    return this.weight * 1.41421;\n  }\n  return this.weight;\n};\n\nGridNode.prototype.isWall = function() {\n  return this.weight === 0;\n};\n\nfunction BinaryHeap(scoreFunction) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\n\nBinaryHeap.prototype = {\n  push: function(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  },\n  pop: function() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  },\n  remove: function(node) {\n    var i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    var end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  },\n  size: function() {\n    return this.content.length;\n  },\n  rescoreElement: function(node) {\n    this.sinkDown(this.content.indexOf(node));\n  },\n  sinkDown: function(n) {\n    // Fetch the element that has to be sunk.\n    var element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n\n      // Compute the parent element's index, and fetch it.\n      var parentN = ((n + 1) >> 1) - 1;\n      var parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      }\n      // Found a parent that is less, no need to sink any further.\n      else {\n        break;\n      }\n    }\n  },\n  bubbleUp: function(n) {\n    // Look up the target element and its score.\n    var length = this.content.length;\n    var element = this.content[n];\n    var elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) << 1;\n      var child1N = child2N - 1;\n      // This is used to store the new position of the element, if any.\n      var swap = null;\n      var child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N];\n        var child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n};\n\nreturn {\n  astar: astar,\n  Graph: Graph\n};\n\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * Stripped down version of Phaser's Vector2 with just the functionality needed for navmeshes.\r\n *\r\n * @export\r\n * @class Vector2\r\n */\r\nexport default class Vector2 {\r\n    x;\r\n    y;\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    equals(v) {\r\n        return this.x === v.x && this.y === v.y;\r\n    }\r\n    angle(v) {\r\n        return Math.atan2(v.y - this.y, v.x - this.x);\r\n    }\r\n    distance(v) {\r\n        const dx = v.x - this.x;\r\n        const dy = v.y - this.y;\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n    }\r\n    subtract(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n    }\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n}\r\n","import Vector2 from \"./math/vector-2\";\r\n/**\r\n * A class that represents a navigable polygon with a navmesh. It is built on top of a\r\n * {@link Polygon}. It implements the properties and fields that javascript-astar needs - weight,\r\n * toString, isWall and getCost. See GPS test from astar repo for structure:\r\n * https://github.com/bgrins/javascript-astar/blob/master/test/tests.js\r\n */\r\nexport default class NavPoly {\r\n    id;\r\n    polygon;\r\n    edges;\r\n    neighbors;\r\n    portals;\r\n    centroid;\r\n    boundingRadius;\r\n    // jsastar property:\r\n    weight = 1;\r\n    x = 0;\r\n    y = 0;\r\n    /**\r\n     * Creates an instance of NavPoly.\r\n     */\r\n    constructor(id, polygon) {\r\n        this.id = id;\r\n        this.polygon = polygon;\r\n        this.edges = polygon.edges;\r\n        this.neighbors = [];\r\n        this.portals = [];\r\n        this.centroid = this.calculateCentroid();\r\n        this.boundingRadius = this.calculateRadius();\r\n    }\r\n    /**\r\n     * Returns an array of points that form the polygon.\r\n     */\r\n    getPoints() {\r\n        return this.polygon.points;\r\n    }\r\n    /**\r\n     * Check if the given point-like object is within the polygon.\r\n     */\r\n    contains(point) {\r\n        // Phaser's polygon check doesn't handle when a point is on one of the edges of the line. Note:\r\n        // check numerical stability here. It would also be good to optimize this for different shapes.\r\n        return this.polygon.contains(point.x, point.y) || this.isPointOnEdge(point);\r\n    }\r\n    /**\r\n     * Only rectangles are supported, so this calculation works, but this is not actually the centroid\r\n     * calculation for a polygon. This is just the average of the vertices - proper centroid of a\r\n     * polygon factors in the area.\r\n     */\r\n    calculateCentroid() {\r\n        const centroid = new Vector2(0, 0);\r\n        const length = this.polygon.points.length;\r\n        this.polygon.points.forEach((p) => centroid.add(p));\r\n        centroid.x /= length;\r\n        centroid.y /= length;\r\n        return centroid;\r\n    }\r\n    /**\r\n     * Calculate the radius of a circle that circumscribes the polygon.\r\n     */\r\n    calculateRadius() {\r\n        let boundingRadius = 0;\r\n        for (const point of this.polygon.points) {\r\n            const d = this.centroid.distance(point);\r\n            if (d > boundingRadius)\r\n                boundingRadius = d;\r\n        }\r\n        return boundingRadius;\r\n    }\r\n    /**\r\n     * Check if the given point-like object is on one of the edges of the polygon.\r\n     */\r\n    isPointOnEdge({ x, y }) {\r\n        for (const edge of this.edges) {\r\n            if (edge.pointOnSegment(x, y))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    destroy() {\r\n        this.neighbors = [];\r\n        this.portals = [];\r\n    }\r\n    // === jsastar methods ===\r\n    toString() {\r\n        return `NavPoly(id: ${this.id} at: ${this.centroid})`;\r\n    }\r\n    isWall() {\r\n        return this.weight === 0;\r\n    }\r\n    centroidDistance(navPolygon) {\r\n        return this.centroid.distance(navPolygon.centroid);\r\n    }\r\n    getCost(navPolygon) {\r\n        return this.centroidDistance(navPolygon);\r\n    }\r\n}\r\n","import Vector2 from \"./math/vector-2\";\r\n/**\r\n * Calculate the distance squared between two points. This is an optimization to a square root when\r\n * you just need to compare relative distances without needing to know the specific distance.\r\n * @param a\r\n * @param b\r\n */\r\nexport function distanceSquared(a, b) {\r\n    const dx = b.x - a.x;\r\n    const dy = b.y - a.y;\r\n    return dx * dx + dy * dy;\r\n}\r\n/**\r\n * Project a point onto a line segment.\r\n * JS Source: http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\r\n * @param point\r\n * @param line\r\n */\r\nexport function projectPointToEdge(point, line) {\r\n    const a = line.start;\r\n    const b = line.end;\r\n    // Consider the parametric equation for the edge's line, p = a + t (b - a). We want to find\r\n    // where our point lies on the line by solving for t:\r\n    //  t = [(p-a) . (b-a)] / |b-a|^2\r\n    const l2 = distanceSquared(a, b);\r\n    let t = ((point.x - a.x) * (b.x - a.x) + (point.y - a.y) * (b.y - a.y)) / l2;\r\n    // We clamp t from [0,1] to handle points outside the segment vw.\r\n    t = clamp(t, 0, 1);\r\n    // Project onto the segment\r\n    const p = new Vector2(a.x + t * (b.x - a.x), a.y + t * (b.y - a.y));\r\n    return p;\r\n}\r\n/**\r\n * Twice the area of the triangle formed by a, b and c.\r\n */\r\nexport function triarea2(a, b, c) {\r\n    const ax = b.x - a.x;\r\n    const ay = b.y - a.y;\r\n    const bx = c.x - a.x;\r\n    const by = c.y - a.y;\r\n    return bx * ay - ax * by;\r\n}\r\n/**\r\n * Clamp the given value between min and max.\r\n */\r\nexport function clamp(value, min, max) {\r\n    if (value < min)\r\n        value = min;\r\n    if (value > max)\r\n        value = max;\r\n    return value;\r\n}\r\n/**\r\n * Check if two values are within a small margin of one another.\r\n */\r\nexport function almostEqual(value1, value2, errorMargin = 0.0001) {\r\n    if (Math.abs(value1 - value2) <= errorMargin)\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n/**\r\n * Find the smallest angle difference between two angles\r\n * https://gist.github.com/Aaronduino/4068b058f8dbc34b4d3a9eedc8b2cbe0\r\n */\r\nexport function angleDifference(x, y) {\r\n    let a = x - y;\r\n    const i = a + Math.PI;\r\n    const j = Math.PI * 2;\r\n    a = i - Math.floor(i / j) * j; // (a+180) % 360; this ensures the correct sign\r\n    a -= Math.PI;\r\n    return a;\r\n}\r\n/**\r\n * Check if two lines are collinear (within a small error margin).\r\n */\r\nexport function areCollinear(line1, line2, errorMargin = 0.0001) {\r\n    // Figure out if the two lines are equal by looking at the area of the triangle formed\r\n    // by their points\r\n    const area1 = triarea2(line1.start, line1.end, line2.start);\r\n    const area2 = triarea2(line1.start, line1.end, line2.end);\r\n    if (almostEqual(area1, 0, errorMargin) && almostEqual(area2, 0, errorMargin)) {\r\n        return true;\r\n    }\r\n    else\r\n        return false;\r\n}\r\nexport function isTruthy(input) {\r\n    return Boolean(input);\r\n}\r\n","// Mostly sourced from PatrolJS at the moment. TODO: come back and reimplement this as an incomplete\r\n// funnel algorithm so astar checks can be more accurate.\r\nimport { triarea2 } from \"./utils\";\r\n/**\r\n * @private\r\n */\r\nexport default class Channel {\r\n    path;\r\n    portals;\r\n    constructor() {\r\n        this.portals = [];\r\n        this.path = [];\r\n    }\r\n    push(p1, p2) {\r\n        if (p2 === undefined)\r\n            p2 = p1;\r\n        this.portals.push({\r\n            left: p1,\r\n            right: p2,\r\n        });\r\n    }\r\n    stringPull() {\r\n        const portals = this.portals;\r\n        const pts = [];\r\n        // Init scan state\r\n        let apexIndex = 0;\r\n        let leftIndex = 0;\r\n        let rightIndex = 0;\r\n        let portalApex = portals[0].left;\r\n        let portalLeft = portals[0].left;\r\n        let portalRight = portals[0].right;\r\n        // Add start point.\r\n        pts.push(portalApex);\r\n        for (var i = 1; i < portals.length; i++) {\r\n            // Find the next portal vertices\r\n            const left = portals[i].left;\r\n            const right = portals[i].right;\r\n            // Update right vertex.\r\n            if (triarea2(portalApex, portalRight, right) <= 0.0) {\r\n                if (portalApex.equals(portalRight) || triarea2(portalApex, portalLeft, right) > 0.0) {\r\n                    // Tighten the funnel.\r\n                    portalRight = right;\r\n                    rightIndex = i;\r\n                }\r\n                else {\r\n                    // Right vertex just crossed over the left vertex, so the left vertex should\r\n                    // now be part of the path.\r\n                    pts.push(portalLeft);\r\n                    // Restart scan from portal left point.\r\n                    // Make current left the new apex.\r\n                    portalApex = portalLeft;\r\n                    apexIndex = leftIndex;\r\n                    // Reset portal\r\n                    portalLeft = portalApex;\r\n                    portalRight = portalApex;\r\n                    leftIndex = apexIndex;\r\n                    rightIndex = apexIndex;\r\n                    // Restart scan\r\n                    i = apexIndex;\r\n                    continue;\r\n                }\r\n            }\r\n            // Update left vertex.\r\n            if (triarea2(portalApex, portalLeft, left) >= 0.0) {\r\n                if (portalApex.equals(portalLeft) || triarea2(portalApex, portalRight, left) < 0.0) {\r\n                    // Tighten the funnel.\r\n                    portalLeft = left;\r\n                    leftIndex = i;\r\n                }\r\n                else {\r\n                    // Left vertex just crossed over the right vertex, so the right vertex should\r\n                    // now be part of the path\r\n                    pts.push(portalRight);\r\n                    // Restart scan from portal right point.\r\n                    // Make current right the new apex.\r\n                    portalApex = portalRight;\r\n                    apexIndex = rightIndex;\r\n                    // Reset portal\r\n                    portalLeft = portalApex;\r\n                    portalRight = portalApex;\r\n                    leftIndex = apexIndex;\r\n                    rightIndex = apexIndex;\r\n                    // Restart scan\r\n                    i = apexIndex;\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        if (pts.length === 0 || !pts[pts.length - 1].equals(portals[portals.length - 1].left)) {\r\n            // Append last point to path.\r\n            pts.push(portals[portals.length - 1].left);\r\n        }\r\n        this.path = pts;\r\n        return pts;\r\n    }\r\n}\r\n","import Vector2 from \"./vector-2\";\r\n/**\r\n * Stripped down version of Phaser's Line with just the functionality needed for navmeshes.\r\n *\r\n * @export\r\n * @class Line\r\n */\r\nexport default class Line {\r\n    start;\r\n    end;\r\n    left;\r\n    right;\r\n    top;\r\n    bottom;\r\n    constructor(x1, y1, x2, y2) {\r\n        this.start = new Vector2(x1, y1);\r\n        this.end = new Vector2(x2, y2);\r\n        this.left = Math.min(x1, x2);\r\n        this.right = Math.max(x1, x2);\r\n        this.top = Math.min(y1, y2);\r\n        this.bottom = Math.max(y1, y2);\r\n    }\r\n    pointOnSegment(x, y) {\r\n        return (x >= this.left &&\r\n            x <= this.right &&\r\n            y >= this.top &&\r\n            y <= this.bottom &&\r\n            this.pointOnLine(x, y));\r\n    }\r\n    pointOnLine(x, y) {\r\n        // Compare slope of line start -> xy to line start -> line end\r\n        return (x - this.left) * (this.bottom - this.top) === (this.right - this.left) * (y - this.top);\r\n    }\r\n}\r\n","import Line from \"./line\";\r\n/**\r\n * Stripped down version of Phaser's Polygon with just the functionality needed for navmeshes.\r\n *\r\n * @export\r\n * @class Polygon\r\n */\r\nexport default class Polygon {\r\n    edges;\r\n    points;\r\n    isClosed;\r\n    constructor(points, closed = true) {\r\n        this.isClosed = closed;\r\n        this.points = points;\r\n        this.edges = [];\r\n        for (let i = 1; i < points.length; i++) {\r\n            const p1 = points[i - 1];\r\n            const p2 = points[i];\r\n            this.edges.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n        }\r\n        if (this.isClosed) {\r\n            const first = points[0];\r\n            const last = points[points.length - 1];\r\n            this.edges.push(new Line(first.x, first.y, last.x, last.y));\r\n        }\r\n    }\r\n    contains(x, y) {\r\n        let inside = false;\r\n        for (let i = -1, j = this.points.length - 1; ++i < this.points.length; j = i) {\r\n            const ix = this.points[i].x;\r\n            const iy = this.points[i].y;\r\n            const jx = this.points[j].x;\r\n            const jy = this.points[j].y;\r\n            if (((iy <= y && y < jy) || (jy <= y && y < iy)) &&\r\n                x < ((jx - ix) * (y - iy)) / (jy - iy) + ix) {\r\n                inside = !inside;\r\n            }\r\n        }\r\n        return inside;\r\n    }\r\n}\r\n","// Directly importing the TS version - no need to double bundle.\r\n/// <reference path=\"../../navmesh/src/javascript-astar.d.ts\" />\r\nimport NavMesh from \"navmesh/src\";\r\n/**\r\n * A wrapper around {@link NavMesh} for Phaser 2 / Phaser CE. Create instances of this class from\r\n * {@link Phaser2NavMeshPlugin}. This is the workhorse that represents a navigation mesh built from\r\n * a series of polygons. Once built, the mesh can be asked for a path from one point to another\r\n * point.\r\n *\r\n * Compared to {@link NavMesh}, this adds visual debugging capabilities and converts paths to\r\n * Phaser-compatible point instances.\r\n */\r\nexport default class Phaser2NavMesh {\r\n    key;\r\n    plugin;\r\n    game;\r\n    debugGraphics;\r\n    navMesh;\r\n    /**\r\n     * Creates an instance of Phaser2NavMesh.\r\n     * @param {Phaser2NavMeshPlugin} plugin The plugin that owns this mesh.\r\n     * @param {string} key The key the mesh is stored under within the plugin.\r\n     * @param {object[][]} meshPolygonPoints Array where each element is an array of point-like\r\n     * objects that defines a polygon.\r\n     * @param {number} [meshShrinkAmount=0] The amount (in pixels) that the navmesh has been shrunk\r\n     * around obstacles (a.k.a the amount obstacles have been expanded)\r\n     * @memberof Phaser2NavMesh\r\n     */\r\n    constructor(plugin, key, meshPolygonPoints, meshShrinkAmount = 0) {\r\n        this.key = key;\r\n        this.plugin = plugin;\r\n        this.game = plugin.game;\r\n        this.debugGraphics = null;\r\n        this.navMesh = new NavMesh(meshPolygonPoints, meshShrinkAmount);\r\n    }\r\n    /**\r\n     * Find if the given point is within any of the polygons in the mesh.\r\n     * @param point\r\n     */\r\n    isPointInMesh(point) {\r\n        return this.navMesh.isPointInMesh(point);\r\n    }\r\n    /**\r\n     * See {@link NavMesh#findPath}. This implements the same functionality, except that the returned\r\n     * path is converted to Phaser-compatible points.\r\n     *\r\n     * @param startPoint A point-like object in the form {x, y}\r\n     * @param endPoint A point-like object in the form {x, y}\r\n     * @param PointClass The point class to use to represent points in the path.\r\n     * @returns An array of points if a path is found, or null if no path\r\n     */\r\n    findPath(startPoint, endPoint, PointClass = Phaser.Point) {\r\n        const path = this.navMesh.findPath(startPoint, endPoint);\r\n        return path ? path.map(({ x, y }) => new PointClass(x, y)) : path;\r\n    }\r\n    /**\r\n     * Enable the debug drawing graphics. If no graphics object is provided, a new instance will be\r\n     * created.\r\n     *\r\n     * @param graphics An optional graphics object for the mesh to use for debug\r\n     * drawing. Note, the mesh will destroy this graphics object when the mesh is destroyed.\r\n     * @returns The graphics object this mesh uses.\r\n     */\r\n    enableDebug(graphics) {\r\n        if (!graphics && !this.debugGraphics) {\r\n            this.debugGraphics = this.game.add.graphics();\r\n        }\r\n        else if (graphics) {\r\n            if (this.debugGraphics)\r\n                this.debugGraphics.destroy();\r\n            this.debugGraphics = graphics;\r\n        }\r\n        if (this.debugGraphics)\r\n            this.debugGraphics.visible = true;\r\n        return this.debugGraphics;\r\n    }\r\n    /** Hide the debug graphics, but don't destroy it. */\r\n    disableDebug() {\r\n        if (this.debugGraphics)\r\n            this.debugGraphics.visible = false;\r\n    }\r\n    /** Returns true if the debug graphics object is enabled and visible. */\r\n    isDebugEnabled() {\r\n        return this.debugGraphics && this.debugGraphics.visible;\r\n    }\r\n    /** Clear the debug graphics. */\r\n    debugDrawClear() {\r\n        if (this.debugGraphics)\r\n            this.debugGraphics.clear();\r\n    }\r\n    /**\r\n     * Visualize the polygons in the navmesh by drawing them to the debug graphics.\r\n     *\r\n     * @param options\r\n     * @param [options.drawCentroid=true] For each polygon, show the approx centroid\r\n     * @param [options.drawBounds=false] For each polygon, show the bounding radius\r\n     * @param [options.drawNeighbors=true] For each polygon, show the connections to neighbors\r\n     * @param [options.drawPortals=true] For each polygon, show the portal edges\r\n     * @param [options.palette=[0x00a0b0, 0x6a4a3c, 0xcc333f, 0xeb6841, 0xedc951]] An array of\r\n     * Phaser-compatible format colors to use when drawing the individual polygons. The first poly\r\n     * uses the first color, the second poly uses the second color, etc.\r\n     */\r\n    debugDrawMesh({ drawCentroid = true, drawBounds = false, drawNeighbors = true, drawPortals = true, palette = [0x00a0b0, 0x6a4a3c, 0xcc333f, 0xeb6841, 0xedc951], } = {}) {\r\n        if (!this.debugGraphics)\r\n            return;\r\n        const graphics = this.debugGraphics;\r\n        const navPolys = this.navMesh.getPolygons();\r\n        navPolys.forEach((poly) => {\r\n            const color = palette[poly.id % palette.length];\r\n            graphics.lineWidth = 0;\r\n            graphics.beginFill(color);\r\n            graphics.drawPolygon(new Phaser.Polygon(...poly.getPoints()));\r\n            graphics.endFill();\r\n            if (drawCentroid) {\r\n                graphics.beginFill(0x000000);\r\n                graphics.drawEllipse(poly.centroid.x, poly.centroid.y, 4, 4);\r\n                graphics.endFill();\r\n            }\r\n            if (drawBounds) {\r\n                graphics.lineStyle(1, 0xffffff);\r\n                const r = poly.boundingRadius;\r\n                graphics.drawEllipse(poly.centroid.x, poly.centroid.y, r, r);\r\n            }\r\n            if (drawNeighbors) {\r\n                graphics.lineStyle(2, 0x000000);\r\n                poly.neighbors.forEach((n) => {\r\n                    graphics.moveTo(poly.centroid.x, poly.centroid.y);\r\n                    graphics.lineTo(n.centroid.x, n.centroid.y);\r\n                });\r\n            }\r\n            if (drawPortals) {\r\n                graphics.lineStyle(10, 0x000000);\r\n                poly.portals.forEach((portal) => {\r\n                    graphics.moveTo(portal.start.x, portal.start.y);\r\n                    graphics.lineTo(portal.end.x, portal.end.y);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Visualize a path (array of points) on the debug graphics.\r\n     *\r\n     * @param path Array of point-like objects in the form {x, y}\r\n     * @param color\r\n     * @param thickness\r\n     * @param alpha\r\n     */\r\n    debugDrawPath(path, color = 0x00ff00, thickness = 10, alpha = 1) {\r\n        if (!this.debugGraphics)\r\n            return;\r\n        if (path && path.length) {\r\n            // Draw line for path\r\n            this.debugGraphics.lineStyle(thickness, color, alpha);\r\n            this.debugGraphics.drawShape(new Phaser.Polygon(...path));\r\n            // Draw circle at start and end of path\r\n            this.debugGraphics.beginFill(color, alpha);\r\n            const d = 0.5 * thickness;\r\n            this.debugGraphics.drawEllipse(path[0].x, path[0].y, d, d);\r\n            if (path.length > 1) {\r\n                const lastPoint = path[path.length - 1];\r\n                this.debugGraphics.drawEllipse(lastPoint.x, lastPoint.y, d, d);\r\n            }\r\n            this.debugGraphics.endFill();\r\n        }\r\n    }\r\n    /** Destroy the mesh, kill the debug graphic and unregister itself with the plugin. */\r\n    destroy() {\r\n        if (this.navMesh)\r\n            this.navMesh.destroy();\r\n        if (this.debugGraphics)\r\n            this.debugGraphics.destroy();\r\n        this.plugin.removeMesh(this.key);\r\n    }\r\n}\r\n","import jsastar from \"javascript-astar\";\r\nimport NavPoly from \"./navpoly\";\r\nimport NavGraph from \"./navgraph\";\r\nimport Channel from \"./channel\";\r\nimport { angleDifference, areCollinear, projectPointToEdge } from \"./utils\";\r\nimport Vector2 from \"./math/vector-2\";\r\nimport Line from \"./math/line\";\r\nimport Polygon from \"./math/polygon\";\r\n/**\r\n * The `NavMesh` class is the workhorse that represents a navigation mesh built from a series of\r\n * polygons. Once built, the mesh can be asked for a path from one point to another point. Some\r\n * internal terminology usage:\r\n * - neighbor: a polygon that shares part of an edge with another polygon\r\n * - portal: when two neighbor's have edges that overlap, the portal is the overlapping line segment\r\n * - channel: the path of polygons from starting point to end point\r\n * - pull the string: run the funnel algorithm on the channel so that the path hugs the edges of the\r\n *   channel. Equivalent to having a string snaking through a hallway and then pulling it taut.\r\n */\r\nexport default class NavMesh {\r\n    meshShrinkAmount;\r\n    navPolygons;\r\n    graph;\r\n    /**\r\n     * @param meshPolygonPoints Array where each element is an array of point-like objects that\r\n     * defines a polygon.\r\n     * @param meshShrinkAmount The amount (in pixels) that the navmesh has been shrunk around\r\n     * obstacles (a.k.a the amount obstacles have been expanded).\r\n     */\r\n    constructor(meshPolygonPoints, meshShrinkAmount = 0) {\r\n        this.meshShrinkAmount = meshShrinkAmount;\r\n        // Convert the PolyPoints[] into NavPoly instances.\r\n        const newPolys = meshPolygonPoints.map((polyPoints) => {\r\n            const vectors = polyPoints.map((p) => new Vector2(p.x, p.y));\r\n            return new Polygon(vectors);\r\n        });\r\n        this.navPolygons = newPolys.map((polygon, i) => new NavPoly(i, polygon));\r\n        this.calculateNeighbors();\r\n        // Astar graph of connections between polygons\r\n        this.graph = new NavGraph(this.navPolygons);\r\n    }\r\n    /**\r\n     * Get the NavPolys that are in this navmesh.\r\n     */\r\n    getPolygons() {\r\n        return this.navPolygons;\r\n    }\r\n    /**\r\n     * Cleanup method to remove references.\r\n     */\r\n    destroy() {\r\n        this.graph.destroy();\r\n        for (const poly of this.navPolygons)\r\n            poly.destroy();\r\n        this.navPolygons = [];\r\n    }\r\n    /**\r\n     * Find if the given point is within any of the polygons in the mesh.\r\n     * @param point\r\n     */\r\n    isPointInMesh(point) {\r\n        return this.navPolygons.some((navPoly) => navPoly.contains(point));\r\n    }\r\n    /**\r\n     * Find the closest point in the mesh to the given point. If the point is already in the mesh,\r\n     * this will give you that point. If the point is outside of the mesh, this will attempt to\r\n     * project this point into the mesh (up to the given maxAllowableDist). This returns an object\r\n     * with:\r\n     * - distance - from the given point to the mesh\r\n     * - polygon - the one the point is closest to, or null\r\n     * - point - the point inside the mesh, or null\r\n     * @param point\r\n     * @param maxAllowableDist\r\n     */\r\n    findClosestMeshPoint(point, maxAllowableDist = Number.POSITIVE_INFINITY) {\r\n        let minDistance = maxAllowableDist;\r\n        let closestPoly = null;\r\n        let pointOnClosestPoly = null;\r\n        for (const navPoly of this.navPolygons) {\r\n            // If we are inside a poly, we've got the closest.\r\n            if (navPoly.contains(point)) {\r\n                minDistance = 0;\r\n                closestPoly = navPoly;\r\n                pointOnClosestPoly = point;\r\n                break;\r\n            }\r\n            // Is the poly close enough to warrant a more accurate check? Point is definitely outside of\r\n            // the polygon. Distance - Radius is the smallest possible distance to an edge of the poly.\r\n            // This will underestimate distance, but that's perfectly fine.\r\n            const r = navPoly.boundingRadius;\r\n            const d = navPoly.centroid.distance(point);\r\n            if (d - r < minDistance) {\r\n                const result = this.projectPointToPolygon(point, navPoly);\r\n                if (result.distance < minDistance) {\r\n                    minDistance = result.distance;\r\n                    closestPoly = navPoly;\r\n                    pointOnClosestPoly = result.point;\r\n                }\r\n            }\r\n        }\r\n        return { distance: minDistance, polygon: closestPoly, point: pointOnClosestPoly };\r\n    }\r\n    /**\r\n     * Find a path from the start point to the end point using this nav mesh.\r\n     * @param {object} startPoint A point-like object in the form {x, y}\r\n     * @param {object} endPoint A point-like object in the form {x, y}\r\n     * @returns {Vector2[]|null} An array of points if a path is found, or null if no path\r\n     */\r\n    findPath(startPoint, endPoint) {\r\n        let startPoly = null;\r\n        let endPoly = null;\r\n        let startDistance = Number.MAX_VALUE;\r\n        let endDistance = Number.MAX_VALUE;\r\n        let d, r;\r\n        const startVector = new Vector2(startPoint.x, startPoint.y);\r\n        const endVector = new Vector2(endPoint.x, endPoint.y);\r\n        // Find the closest poly for the starting and ending point\r\n        for (const navPoly of this.navPolygons) {\r\n            r = navPoly.boundingRadius;\r\n            // Start\r\n            d = navPoly.centroid.distance(startVector);\r\n            if (d <= startDistance && d <= r && navPoly.contains(startVector)) {\r\n                startPoly = navPoly;\r\n                startDistance = d;\r\n            }\r\n            // End\r\n            d = navPoly.centroid.distance(endVector);\r\n            if (d <= endDistance && d <= r && navPoly.contains(endVector)) {\r\n                endPoly = navPoly;\r\n                endDistance = d;\r\n            }\r\n        }\r\n        // If the end point wasn't inside a polygon, run a more liberal check that allows a point\r\n        // to be within meshShrinkAmount radius of a polygon\r\n        if (!endPoly && this.meshShrinkAmount > 0) {\r\n            for (const navPoly of this.navPolygons) {\r\n                r = navPoly.boundingRadius + this.meshShrinkAmount;\r\n                d = navPoly.centroid.distance(endVector);\r\n                if (d <= r) {\r\n                    const { distance } = this.projectPointToPolygon(endVector, navPoly);\r\n                    if (distance <= this.meshShrinkAmount && distance < endDistance) {\r\n                        endPoly = navPoly;\r\n                        endDistance = distance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // No matching polygons locations for the end, so no path found\r\n        // because start point is valid normally, check end point first\r\n        if (!endPoly)\r\n            return null;\r\n        // Same check as above, but for the start point\r\n        if (!startPoly && this.meshShrinkAmount > 0) {\r\n            for (const navPoly of this.navPolygons) {\r\n                // Check if point is within bounding circle to avoid extra projection calculations\r\n                r = navPoly.boundingRadius + this.meshShrinkAmount;\r\n                d = navPoly.centroid.distance(startVector);\r\n                if (d <= r) {\r\n                    // Check if projected point is within range of a polgyon and is closer than the\r\n                    // previous point\r\n                    const { distance } = this.projectPointToPolygon(startVector, navPoly);\r\n                    if (distance <= this.meshShrinkAmount && distance < startDistance) {\r\n                        startPoly = navPoly;\r\n                        startDistance = distance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // No matching polygons locations for the start, so no path found\r\n        if (!startPoly)\r\n            return null;\r\n        // If the start and end polygons are the same, return a direct path\r\n        if (startPoly === endPoly)\r\n            return [startVector, endVector];\r\n        // Search!\r\n        const astarPath = jsastar.astar.search(this.graph, startPoly, endPoly, {\r\n            heuristic: this.graph.navHeuristic,\r\n        });\r\n        // While the start and end polygons may be valid, no path between them\r\n        if (astarPath.length === 0)\r\n            return null;\r\n        // jsastar drops the first point from the path, but the funnel algorithm needs it\r\n        astarPath.unshift(startPoly);\r\n        // We have a path, so now time for the funnel algorithm\r\n        const channel = new Channel();\r\n        channel.push(startVector);\r\n        for (let i = 0; i < astarPath.length - 1; i++) {\r\n            const navPolygon = astarPath[i];\r\n            const nextNavPolygon = astarPath[i + 1];\r\n            // Find the portal\r\n            let portal = null;\r\n            for (let i = 0; i < navPolygon.neighbors.length; i++) {\r\n                if (navPolygon.neighbors[i].id === nextNavPolygon.id) {\r\n                    portal = navPolygon.portals[i];\r\n                }\r\n            }\r\n            if (!portal)\r\n                throw new Error(\"Path was supposed to be found, but portal is missing!\");\r\n            // Push the portal vertices into the channel\r\n            channel.push(portal.start, portal.end);\r\n        }\r\n        channel.push(endVector);\r\n        // Pull a string along the channel to run the funnel\r\n        channel.stringPull();\r\n        // Clone path, excluding duplicates\r\n        let lastPoint = null;\r\n        const phaserPath = [];\r\n        for (const p of channel.path) {\r\n            const newPoint = p.clone();\r\n            if (!lastPoint || !newPoint.equals(lastPoint))\r\n                phaserPath.push(newPoint);\r\n            lastPoint = newPoint;\r\n        }\r\n        return phaserPath;\r\n    }\r\n    calculateNeighbors() {\r\n        // Fill out the neighbor information for each navpoly\r\n        for (let i = 0; i < this.navPolygons.length; i++) {\r\n            const navPoly = this.navPolygons[i];\r\n            for (let j = i + 1; j < this.navPolygons.length; j++) {\r\n                const otherNavPoly = this.navPolygons[j];\r\n                // Check if the other navpoly is within range to touch\r\n                const d = navPoly.centroid.distance(otherNavPoly.centroid);\r\n                if (d > navPoly.boundingRadius + otherNavPoly.boundingRadius)\r\n                    continue;\r\n                // The are in range, so check each edge pairing\r\n                for (const edge of navPoly.edges) {\r\n                    for (const otherEdge of otherNavPoly.edges) {\r\n                        // If edges aren't collinear, not an option for connecting navpolys\r\n                        if (!areCollinear(edge, otherEdge))\r\n                            continue;\r\n                        // If they are collinear, check if they overlap\r\n                        const overlap = this.getSegmentOverlap(edge, otherEdge);\r\n                        if (!overlap)\r\n                            continue;\r\n                        // Connections are symmetric!\r\n                        navPoly.neighbors.push(otherNavPoly);\r\n                        otherNavPoly.neighbors.push(navPoly);\r\n                        // Calculate the portal between the two polygons - this needs to be in\r\n                        // counter-clockwise order, relative to each polygon\r\n                        const [p1, p2] = overlap;\r\n                        let edgeStartAngle = navPoly.centroid.angle(edge.start);\r\n                        let a1 = navPoly.centroid.angle(overlap[0]);\r\n                        let a2 = navPoly.centroid.angle(overlap[1]);\r\n                        let d1 = angleDifference(edgeStartAngle, a1);\r\n                        let d2 = angleDifference(edgeStartAngle, a2);\r\n                        if (d1 < d2) {\r\n                            navPoly.portals.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n                        }\r\n                        else {\r\n                            navPoly.portals.push(new Line(p2.x, p2.y, p1.x, p1.y));\r\n                        }\r\n                        edgeStartAngle = otherNavPoly.centroid.angle(otherEdge.start);\r\n                        a1 = otherNavPoly.centroid.angle(overlap[0]);\r\n                        a2 = otherNavPoly.centroid.angle(overlap[1]);\r\n                        d1 = angleDifference(edgeStartAngle, a1);\r\n                        d2 = angleDifference(edgeStartAngle, a2);\r\n                        if (d1 < d2) {\r\n                            otherNavPoly.portals.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n                        }\r\n                        else {\r\n                            otherNavPoly.portals.push(new Line(p2.x, p2.y, p1.x, p1.y));\r\n                        }\r\n                        // Two convex polygons shouldn't be connected more than once! (Unless\r\n                        // there are unnecessary vertices...)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Check two collinear line segments to see if they overlap by sorting the points.\r\n    // Algorithm source: http://stackoverflow.com/a/17152247\r\n    getSegmentOverlap(line1, line2) {\r\n        const points = [\r\n            { line: line1, point: line1.start },\r\n            { line: line1, point: line1.end },\r\n            { line: line2, point: line2.start },\r\n            { line: line2, point: line2.end },\r\n        ];\r\n        points.sort(function (a, b) {\r\n            if (a.point.x < b.point.x)\r\n                return -1;\r\n            else if (a.point.x > b.point.x)\r\n                return 1;\r\n            else {\r\n                if (a.point.y < b.point.y)\r\n                    return -1;\r\n                else if (a.point.y > b.point.y)\r\n                    return 1;\r\n                else\r\n                    return 0;\r\n            }\r\n        });\r\n        // If the first two points in the array come from the same line, no overlap\r\n        const noOverlap = points[0].line === points[1].line;\r\n        // If the two middle points in the array are the same coordinates, then there is a\r\n        // single point of overlap.\r\n        const singlePointOverlap = points[1].point.equals(points[2].point);\r\n        if (noOverlap || singlePointOverlap)\r\n            return null;\r\n        else\r\n            return [points[1].point, points[2].point];\r\n    }\r\n    /**\r\n     * Project a point onto a polygon in the shortest distance possible.\r\n     *\r\n     * @param {Phaser.Point} point The point to project\r\n     * @param {NavPoly} navPoly The navigation polygon to test against\r\n     * @returns {{point: Phaser.Point, distance: number}}\r\n     */\r\n    projectPointToPolygon(point, navPoly) {\r\n        let closestProjection = null;\r\n        let closestDistance = Number.MAX_VALUE;\r\n        for (const edge of navPoly.edges) {\r\n            const projectedPoint = projectPointToEdge(point, edge);\r\n            const d = point.distance(projectedPoint);\r\n            if (closestProjection === null || d < closestDistance) {\r\n                closestDistance = d;\r\n                closestProjection = projectedPoint;\r\n            }\r\n        }\r\n        return { point: closestProjection, distance: closestDistance };\r\n    }\r\n}\r\n","import jsastar from \"javascript-astar\";\r\n/**\r\n * Graph for javascript-astar. It implements the functionality for astar. See GPS test from astar\r\n * repo for structure: https://github.com/bgrins/javascript-astar/blob/master/test/tests.js\r\n *\r\n * @class NavGraph\r\n * @private\r\n */\r\nclass NavGraph {\r\n    nodes;\r\n    grid = [];\r\n    constructor(navPolygons) {\r\n        this.nodes = navPolygons;\r\n        this.init();\r\n    }\r\n    neighbors(navPolygon) {\r\n        return navPolygon.neighbors;\r\n    }\r\n    navHeuristic(navPolygon1, navPolygon2) {\r\n        return navPolygon1.centroidDistance(navPolygon2);\r\n    }\r\n    destroy() {\r\n        this.cleanDirty();\r\n        this.nodes = [];\r\n    }\r\n    init = jsastar.Graph.prototype.init.bind(this);\r\n    cleanDirty = jsastar.Graph.prototype.cleanDirty.bind(this);\r\n    markDirty = jsastar.Graph.prototype.markDirty.bind(this);\r\n    toString = jsastar.Graph.prototype.toString.bind(this);\r\n}\r\nexport default NavGraph;\r\n","import Phaser2NavMesh from \"./phaser2-navmesh\";\r\n/**\r\n * This class can create navigation meshes for use in Phaser 2 / Phaser CE. (For Phaser 3, see\r\n * {@link PhaserNavMeshPlugin}.) The navmeshes can be constructed from convex polygons embedded in a\r\n * Tiled map. The class that conforms to Phaser 2's plugin structure.\r\n */\r\nexport default class Phaser2NavMeshPlugin extends Phaser.Plugin {\r\n    phaserNavMeshes = {};\r\n    constructor(game, pluginManager) {\r\n        super(game, pluginManager);\r\n    }\r\n    /** Destroy all navmeshes created and the plugin itself. */\r\n    destroy() {\r\n        this.removeAllMeshes();\r\n    }\r\n    /**\r\n     * Remove all the meshes from the navmesh.\r\n     */\r\n    removeAllMeshes() {\r\n        const meshes = Object.values(this.phaserNavMeshes);\r\n        this.phaserNavMeshes = {};\r\n        meshes.forEach((m) => m.destroy());\r\n    }\r\n    /**\r\n     * Remove the navmesh stored under the given key from the plugin. This does not destroy the\r\n     * navmesh.\r\n     *\r\n     * @param key\r\n     */\r\n    removeMesh(key) {\r\n        if (this.phaserNavMeshes[key])\r\n            delete this.phaserNavMeshes[key];\r\n    }\r\n    /**\r\n     * Load a navmesh from Tiled. Currently assumes that the polygons are squares! Does not support\r\n     * tilemap layer scaling, rotation or position.\r\n     *\r\n     * @param key Key to use when storing this navmesh within the plugin.\r\n     * @param objectLayer The ObjectLayer from a tilemap that contains\r\n     * the polygons that make up the navmesh.\r\n     * @param The amount (in pixels) that the navmesh has been shrunk\r\n     * around obstacles (a.k.a the amount obstacles have been expanded)\r\n     */\r\n    buildMeshFromTiled(key, objectLayer, meshShrinkAmount = 0) {\r\n        if (this.phaserNavMeshes[key]) {\r\n            console.warn(`NavMeshPlugin: a navmesh already exists with the given key: ${key}`);\r\n            return this.phaserNavMeshes[key];\r\n        }\r\n        if (!objectLayer || objectLayer.length === 0) {\r\n            console.warn(`NavMeshPlugin: The given tilemap object layer is empty or undefined: ${objectLayer}`);\r\n        }\r\n        // Load up the object layer\r\n        const objects = objectLayer || [];\r\n        // Loop over the objects and construct a polygon - assumes a rectangle for now!\r\n        // TODO: support layer position, scale, rotation\r\n        const polygons = objects.map((obj) => {\r\n            const top = obj.y;\r\n            const bottom = obj.y + obj.height;\r\n            const left = obj.x;\r\n            const right = obj.x + obj.width;\r\n            return [\r\n                { x: left, y: top },\r\n                { x: left, y: bottom },\r\n                { x: right, y: bottom },\r\n                { x: right, y: top },\r\n            ];\r\n        });\r\n        const mesh = new Phaser2NavMesh(this, key, polygons, meshShrinkAmount);\r\n        this.phaserNavMeshes[key] = mesh;\r\n        return mesh;\r\n    }\r\n}\r\n","/**\r\n * `phaser2-navmesh` is a Phaser v2 wrapper around `navmesh` that creates a Phaser 2 game plugin.\r\n * Phaser 2 or Phaser-ce is expected to be in the global scope.\r\n * @packageDocumentation\r\n * @module phaser2-navmesh\r\n */\r\n/// <reference path=\"../../../node_modules/phaser-ce/typescript/phaser.comments.d.ts\" />\r\nimport Phaser2NavMeshPlugin from \"./phaser2-navmesh-plugin\";\r\nimport Phaser2NavMesh from \"./phaser2-navmesh\";\r\nexport { Phaser2NavMeshPlugin, Phaser2NavMesh };\r\nexport default Phaser2NavMeshPlugin;\r\n"],"sourceRoot":""}