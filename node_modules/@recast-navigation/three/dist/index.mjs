import{Raw as t}from"@recast-navigation/core";import*as e from"three";import{Box3 as n,Vector3 as i,InstancedBufferGeometry as r,Float32BufferAttribute as s,InstancedInterleavedBuffer as a,InterleavedBufferAttribute as o,WireframeGeometry as l,Sphere as d,UniformsLib as c,Vector2 as h,ShaderLib as u,UniformsUtils as p,ShaderMaterial as f,Vector4 as m,Matrix4 as w,Line3 as g,Mesh as y,MathUtils as v,Object3D as b,MeshBasicMaterial as x,CylinderGeometry as D,BufferGeometry as M,BufferAttribute as S,LineBasicMaterial as A,CircleGeometry as _,CatmullRomCurve3 as E,Line as z,BoxGeometry as U}from"three";import{generateSoloNavMesh as C,generateTiledNavMesh as I,generateTileCache as P}from"@recast-navigation/generators";const B=new n,L=new i;class R extends r{constructor(){super(),this.isLineSegmentsGeometry=!0,this.type="LineSegmentsGeometry";this.setIndex([0,2,1,2,3,1,2,4,3,4,5,3,4,6,5,6,7,5]),this.setAttribute("position",new s([-1,2,0,1,2,0,-1,1,0,1,1,0,-1,0,0,1,0,0,-1,-1,0,1,-1,0],3)),this.setAttribute("uv",new s([-1,2,1,2,-1,1,1,1,-1,-1,1,-1,-1,-2,1,-2],2))}applyMatrix4(t){const e=this.attributes.instanceStart,n=this.attributes.instanceEnd;return void 0!==e&&(e.applyMatrix4(t),n.applyMatrix4(t),e.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}setPositions(t){let e;t instanceof Float32Array?e=t:Array.isArray(t)&&(e=new Float32Array(t));const n=new a(e,6,1);return this.setAttribute("instanceStart",new o(n,3,0)),this.setAttribute("instanceEnd",new o(n,3,3)),this.computeBoundingBox(),this.computeBoundingSphere(),this}setColors(t){let e;t instanceof Float32Array?e=t:Array.isArray(t)&&(e=new Float32Array(t));const n=new a(e,6,1);return this.setAttribute("instanceColorStart",new o(n,3,0)),this.setAttribute("instanceColorEnd",new o(n,3,3)),this}fromWireframeGeometry(t){return this.setPositions(t.attributes.position.array),this}fromEdgesGeometry(t){return this.setPositions(t.attributes.position.array),this}fromMesh(t){return this.fromWireframeGeometry(new l(t.geometry)),this}fromLineSegments(t){const e=t.geometry;return this.setPositions(e.attributes.position.array),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new n);const t=this.attributes.instanceStart,e=this.attributes.instanceEnd;void 0!==t&&void 0!==e&&(this.boundingBox.setFromBufferAttribute(t),B.setFromBufferAttribute(e),this.boundingBox.union(B))}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new d),null===this.boundingBox&&this.computeBoundingBox();const t=this.attributes.instanceStart,e=this.attributes.instanceEnd;if(void 0!==t&&void 0!==e){const n=this.boundingSphere.center;this.boundingBox.getCenter(n);let i=0;for(let r=0,s=t.count;r<s;r++)L.fromBufferAttribute(t,r),i=Math.max(i,n.distanceToSquared(L)),L.fromBufferAttribute(e,r),i=Math.max(i,n.distanceToSquared(L));this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error("THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.",this)}}toJSON(){}applyMatrix(t){return console.warn("THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4()."),this.applyMatrix4(t)}}c.line={worldUnits:{value:1},linewidth:{value:1},resolution:{value:new h(1,1)},dashOffset:{value:0},dashScale:{value:1},dashSize:{value:1},gapSize:{value:1}},u.line={uniforms:p.merge([c.common,c.fog,c.line]),vertexShader:"\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n\t\tuniform float linewidth;\n\t\tuniform vec2 resolution;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n\t\t#ifdef WORLD_UNITS\n\n\t\t\tvarying vec4 worldPos;\n\t\t\tvarying vec3 worldStart;\n\t\t\tvarying vec3 worldEnd;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t#endif\n\n\t\t#else\n\n\t\t\tvarying vec2 vUv;\n\n\t\t#endif\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashScale;\n\t\t\tattribute float instanceDistanceStart;\n\t\t\tattribute float instanceDistanceEnd;\n\t\t\tvarying float vLineDistance;\n\n\t\t#endif\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\t\t\t\tvUv = uv;\n\n\t\t\t#endif\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\tworldStart = start.xyz;\n\t\t\t\tworldEnd = end.xyz;\n\n\t\t\t#else\n\n\t\t\t\tvUv = uv;\n\n\t\t\t#endif\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec3 ndcStart = clipStart.xyz / clipStart.w;\n\t\t\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd.xy - ndcStart.xy;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\tvec3 worldDir = normalize( end.xyz - start.xyz );\n\t\t\t\tvec3 tmpFwd = normalize( mix( start.xyz, end.xyz, 0.5 ) );\n\t\t\t\tvec3 worldUp = normalize( cross( worldDir, tmpFwd ) );\n\t\t\t\tvec3 worldFwd = cross( worldDir, worldUp );\n\t\t\t\tworldPos = position.y < 0.5 ? start: end;\n\n\t\t\t\t// height offset\n\t\t\t\tfloat hw = linewidth * 0.5;\n\t\t\t\tworldPos.xyz += position.x < 0.0 ? hw * worldUp : - hw * worldUp;\n\n\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t// won't be rendering the endcaps\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t// cap extension\n\t\t\t\t\tworldPos.xyz += position.y < 0.5 ? - hw * worldDir : hw * worldDir;\n\n\t\t\t\t\t// add width to the box\n\t\t\t\t\tworldPos.xyz += worldFwd * hw;\n\n\t\t\t\t\t// endcaps\n\t\t\t\t\tif ( position.y > 1.0 || position.y < 0.0 ) {\n\n\t\t\t\t\t\tworldPos.xyz -= worldFwd * 2.0 * hw;\n\n\t\t\t\t\t}\n\n\t\t\t\t#endif\n\n\t\t\t\t// project the worldpos\n\t\t\t\tvec4 clip = projectionMatrix * worldPos;\n\n\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t// segments overlap neatly\n\t\t\t\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\n\t\t\t\tclip.z = clipPose.z * clip.w;\n\n\t\t\t#else\n\n\t\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\tdir.x /= aspect;\n\t\t\t\toffset.x /= aspect;\n\n\t\t\t\t// sign flip\n\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t// endcaps\n\t\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\t\toffset += - dir;\n\n\t\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\t\toffset += dir;\n\n\t\t\t\t}\n\n\t\t\t\t// adjust for linewidth\n\t\t\t\toffset *= linewidth;\n\n\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\toffset /= resolution.y;\n\n\t\t\t\t// select end\n\t\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t\t// back to clip space\n\t\t\t\toffset *= clip.w;\n\n\t\t\t\tclip.xy += offset;\n\n\t\t\t#endif\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t",fragmentShader:"\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\t\tuniform float linewidth;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashOffset;\n\t\t\tuniform float dashSize;\n\t\t\tuniform float gapSize;\n\n\t\t#endif\n\n\t\tvarying float vLineDistance;\n\n\t\t#ifdef WORLD_UNITS\n\n\t\t\tvarying vec4 worldPos;\n\t\t\tvarying vec3 worldStart;\n\t\t\tvarying vec3 worldEnd;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t#endif\n\n\t\t#else\n\n\t\t\tvarying vec2 vUv;\n\n\t\t#endif\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n\t\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\n\n\t\t\tfloat mua;\n\t\t\tfloat mub;\n\n\t\t\tvec3 p13 = p1 - p3;\n\t\t\tvec3 p43 = p4 - p3;\n\n\t\t\tvec3 p21 = p2 - p1;\n\n\t\t\tfloat d1343 = dot( p13, p43 );\n\t\t\tfloat d4321 = dot( p43, p21 );\n\t\t\tfloat d1321 = dot( p13, p21 );\n\t\t\tfloat d4343 = dot( p43, p43 );\n\t\t\tfloat d2121 = dot( p21, p21 );\n\n\t\t\tfloat denom = d2121 * d4343 - d4321 * d4321;\n\n\t\t\tfloat numer = d1343 * d4321 - d1321 * d4343;\n\n\t\t\tmua = numer / denom;\n\t\t\tmua = clamp( mua, 0.0, 1.0 );\n\t\t\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\n\t\t\tmub = clamp( mub, 0.0, 1.0 );\n\n\t\t\treturn vec2( mua, mub );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t#endif\n\n\t\t\tfloat alpha = opacity;\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\n\t\t\t\tvec3 lineDir = worldEnd - worldStart;\n\t\t\t\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\n\n\t\t\t\tvec3 p1 = worldStart + lineDir * params.x;\n\t\t\t\tvec3 p2 = rayEnd * params.y;\n\t\t\t\tvec3 delta = p1 - p2;\n\t\t\t\tfloat len = length( delta );\n\t\t\t\tfloat norm = len / linewidth;\n\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\tfloat dnorm = fwidth( norm );\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tif ( norm > 0.5 ) {\n\n\t\t\t\t\t\t\tdiscard;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#endif\n\n\t\t\t#else\n\n\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t// artifacts appear on some hardware if a derivative is taken within a conditional\n\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\tfloat len2 = a * a + b * b;\n\t\t\t\t\tfloat dlen = fwidth( len2 );\n\n\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t#else\n\n\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t\t\t}\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\tvec4 diffuseColor = vec4( diffuse, alpha );\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tgl_FragColor = vec4( diffuseColor.rgb, alpha );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <colorspace_fragment>\n\t\t\t#include <fog_fragment>\n\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t}\n\t\t"};class T extends f{constructor(t){super({type:"LineMaterial",uniforms:p.clone(u.line.uniforms),vertexShader:u.line.vertexShader,fragmentShader:u.line.fragmentShader,clipping:!0}),this.isLineMaterial=!0,this.setValues(t)}get color(){return this.uniforms.diffuse.value}set color(t){this.uniforms.diffuse.value=t}get worldUnits(){return"WORLD_UNITS"in this.defines}set worldUnits(t){!0===t?this.defines.WORLD_UNITS="":delete this.defines.WORLD_UNITS}get linewidth(){return this.uniforms.linewidth.value}set linewidth(t){this.uniforms.linewidth&&(this.uniforms.linewidth.value=t)}get dashed(){return"USE_DASH"in this.defines}set dashed(t){!0===t!==this.dashed&&(this.needsUpdate=!0),!0===t?this.defines.USE_DASH="":delete this.defines.USE_DASH}get dashScale(){return this.uniforms.dashScale.value}set dashScale(t){this.uniforms.dashScale.value=t}get dashSize(){return this.uniforms.dashSize.value}set dashSize(t){this.uniforms.dashSize.value=t}get dashOffset(){return this.uniforms.dashOffset.value}set dashOffset(t){this.uniforms.dashOffset.value=t}get gapSize(){return this.uniforms.gapSize.value}set gapSize(t){this.uniforms.gapSize.value=t}get opacity(){return this.uniforms.opacity.value}set opacity(t){this.uniforms&&(this.uniforms.opacity.value=t)}get resolution(){return this.uniforms.resolution.value}set resolution(t){this.uniforms.resolution.value.copy(t)}get alphaToCoverage(){return"USE_ALPHA_TO_COVERAGE"in this.defines}set alphaToCoverage(t){this.defines&&(!0===t!==this.alphaToCoverage&&(this.needsUpdate=!0),!0===t?this.defines.USE_ALPHA_TO_COVERAGE="":delete this.defines.USE_ALPHA_TO_COVERAGE)}}const N=new m,V=new i,O=new i,H=new m,W=new m,F=new m,G=new i,j=new w,k=new g,q=new i,Q=new n,$=new d,J=new m;let X,K;function Y(t,e,n){return J.set(0,0,-e,1).applyMatrix4(t.projectionMatrix),J.multiplyScalar(1/J.w),J.x=K/n.width,J.y=K/n.height,J.applyMatrix4(t.projectionMatrixInverse),J.multiplyScalar(1/J.w),Math.abs(Math.max(J.x,J.y))}class Z extends y{constructor(t=new R,e=new T({color:16777215*Math.random()})){super(t,e),this.isLineSegments2=!0,this.type="LineSegments2"}computeLineDistances(){const t=this.geometry,e=t.attributes.instanceStart,n=t.attributes.instanceEnd,i=new Float32Array(2*e.count);for(let t=0,r=0,s=e.count;t<s;t++,r+=2)V.fromBufferAttribute(e,t),O.fromBufferAttribute(n,t),i[r]=0===r?0:i[r-1],i[r+1]=i[r]+V.distanceTo(O);const r=new a(i,2,1);return t.setAttribute("instanceDistanceStart",new o(r,1,0)),t.setAttribute("instanceDistanceEnd",new o(r,1,1)),this}raycast(t,e){const n=this.material.worldUnits,r=t.camera;null!==r||n||console.error('LineSegments2: "Raycaster.camera" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.');const s=void 0!==t.params.Line2&&t.params.Line2.threshold||0;X=t.ray;const a=this.matrixWorld,o=this.geometry,l=this.material;let d,c;if(K=l.linewidth+s,null===o.boundingSphere&&o.computeBoundingSphere(),$.copy(o.boundingSphere).applyMatrix4(a),n)d=.5*K;else{d=Y(r,Math.max(r.near,$.distanceToPoint(X.origin)),l.resolution)}if($.radius+=d,!1!==X.intersectsSphere($)){if(null===o.boundingBox&&o.computeBoundingBox(),Q.copy(o.boundingBox).applyMatrix4(a),n)c=.5*K;else{c=Y(r,Math.max(r.near,Q.distanceToPoint(X.origin)),l.resolution)}Q.expandByScalar(c),!1!==X.intersectsBox(Q)&&(n?function(t,e){const n=t.matrixWorld,r=t.geometry,s=r.attributes.instanceStart,a=r.attributes.instanceEnd;for(let o=0,l=Math.min(r.instanceCount,s.count);o<l;o++){k.start.fromBufferAttribute(s,o),k.end.fromBufferAttribute(a,o),k.applyMatrix4(n);const r=new i,l=new i;X.distanceSqToSegment(k.start,k.end,l,r),l.distanceTo(r)<.5*K&&e.push({point:l,pointOnLine:r,distance:X.origin.distanceTo(l),object:t,face:null,faceIndex:o,uv:null,uv1:null})}}(this,e):function(t,e,n){const r=e.projectionMatrix,s=t.material.resolution,a=t.matrixWorld,o=t.geometry,l=o.attributes.instanceStart,d=o.attributes.instanceEnd,c=Math.min(o.instanceCount,l.count),h=-e.near;X.at(1,F),F.w=1,F.applyMatrix4(e.matrixWorldInverse),F.applyMatrix4(r),F.multiplyScalar(1/F.w),F.x*=s.x/2,F.y*=s.y/2,F.z=0,G.copy(F),j.multiplyMatrices(e.matrixWorldInverse,a);for(let e=0,o=c;e<o;e++){if(H.fromBufferAttribute(l,e),W.fromBufferAttribute(d,e),H.w=1,W.w=1,H.applyMatrix4(j),W.applyMatrix4(j),H.z>h&&W.z>h)continue;if(H.z>h){const t=H.z-W.z,e=(H.z-h)/t;H.lerp(W,e)}else if(W.z>h){const t=W.z-H.z,e=(W.z-h)/t;W.lerp(H,e)}H.applyMatrix4(r),W.applyMatrix4(r),H.multiplyScalar(1/H.w),W.multiplyScalar(1/W.w),H.x*=s.x/2,H.y*=s.y/2,W.x*=s.x/2,W.y*=s.y/2,k.start.copy(H),k.start.z=0,k.end.copy(W),k.end.z=0;const o=k.closestPointToPointParameter(G,!0);k.at(o,q);const c=v.lerp(H.z,W.z,o),u=c>=-1&&c<=1,p=G.distanceTo(q)<.5*K;if(u&&p){k.start.fromBufferAttribute(l,e),k.end.fromBufferAttribute(d,e),k.start.applyMatrix4(a),k.end.applyMatrix4(a);const r=new i,s=new i;X.distanceSqToSegment(k.start,k.end,s,r),n.push({point:s,pointOnLine:r,distance:X.origin.distanceTo(s),object:t,face:null,faceIndex:e,uv:null,uv1:null})}}}(this,r,e))}}onBeforeRender(t){const e=this.material.uniforms;e&&e.resolution&&(t.getViewport(N),this.material.uniforms.resolution.value.set(N.z,N.w))}}const tt=new e.Color;class et extends e.Group{pointGeometry=new e.SphereGeometry(.02,32,32);currentVertices=[];currentPrimitive=0;constructor({triMaterial:n,pointMaterial:i,lineMaterial:r}={}){super(),this.triMaterial=n??new e.MeshBasicMaterial({vertexColors:!0,transparent:!0,opacity:.4,depthWrite:!1}),this.pointMaterial=i??new e.MeshBasicMaterial,this.lineMaterial=r??new T({color:16777215,linewidth:2,vertexColors:!0,polygonOffset:!0,polygonOffsetFactor:-4,polygonOffsetUnits:-10}),this.debugDrawImpl=new t.Module.DebugDrawImpl,this.debugDrawImpl.handleBegin=(t,e)=>{this.currentPrimitive=t,this.currentVertices=[]},this.debugDrawImpl.handleDepthMask=t=>{},this.debugDrawImpl.handleTexture=t=>{},this.debugDrawImpl.handleVertexWithColor=(t,e,n,i)=>{this.vertex(t,e,n,i)},this.debugDrawImpl.handleVertexWithColorAndUV=(t,e,n,i,r,s)=>{this.vertex(t,e,n,i)},this.debugDrawImpl.handleEnd=()=>{this.currentPrimitive===t.Module.DU_DRAW_LINES?this.endLines():this.currentPrimitive===t.Module.DU_DRAW_TRIS?this.endTris():this.currentPrimitive===t.Module.DU_DRAW_QUADS?this.endQuads():this.currentPrimitive===t.Module.DU_DRAW_POINTS&&this.endPoints()}}drawHeightfieldSolid(e){t.RecastDebugDraw.debugDrawHeightfieldSolid(this.debugDrawImpl,e.raw)}drawHeightfieldWalkable(e){t.RecastDebugDraw.debugDrawHeightfieldWalkable(this.debugDrawImpl,e.raw)}drawCompactHeightfieldSolid(e){t.RecastDebugDraw.debugDrawCompactHeightfieldSolid(this.debugDrawImpl,e.raw)}drawCompactHeightfieldRegions(e){t.RecastDebugDraw.debugDrawCompactHeightfieldRegions(this.debugDrawImpl,e.raw)}drawCompactHeightfieldDistance(e){t.RecastDebugDraw.debugDrawCompactHeightfieldDistance(this.debugDrawImpl,e.raw)}drawHeightfieldLayer(e,n){t.RecastDebugDraw.debugDrawHeightfieldLayer(this.debugDrawImpl,e.raw,n)}drawHeightfieldLayers(e){t.RecastDebugDraw.debugDrawHeightfieldLayers(this.debugDrawImpl,e.raw)}drawRegionConnections(e,n=1){t.RecastDebugDraw.debugDrawRegionConnections(this.debugDrawImpl,e.raw,n)}drawRawContours(e,n=1){t.RecastDebugDraw.debugDrawRawContours(this.debugDrawImpl,e.raw,n)}drawContours(e,n=1){t.RecastDebugDraw.debugDrawContours(this.debugDrawImpl,e.raw,n)}drawPolyMesh(e){t.RecastDebugDraw.debugDrawPolyMesh(this.debugDrawImpl,e.raw)}drawPolyMeshDetail(e){t.RecastDebugDraw.debugDrawPolyMeshDetail(this.debugDrawImpl,e.raw)}drawNavMesh(e,n=0){t.DetourDebugDraw.debugDrawNavMesh(this.debugDrawImpl,e.raw.getNavMesh(),n)}drawNavMeshWithClosedList(e,n,i=0){t.DetourDebugDraw.debugDrawNavMeshWithClosedList(this.debugDrawImpl,e.raw.m_navMesh,n.raw.m_navQuery,i)}drawNavMeshNodes(e){t.DetourDebugDraw.debugDrawNavMeshNodes(this.debugDrawImpl,e.raw.m_navQuery)}drawNavMeshBVTree(e){t.DetourDebugDraw.debugDrawNavMeshBVTree(this.debugDrawImpl,e.raw.m_navMesh)}drawNavMeshPortals(e){t.DetourDebugDraw.debugDrawNavMeshPortals(this.debugDrawImpl,e.raw.m_navMesh)}drawNavMeshPolysWithFlags(e,n,i){t.DetourDebugDraw.debugDrawNavMeshPolysWithFlags(this.debugDrawImpl,e.raw.m_navMesh,n,i)}drawNavMeshPoly(e,n,i){t.DetourDebugDraw.debugDrawNavMeshPoly(this.debugDrawImpl,e.raw.m_navMesh,n,i)}reset(){for(const t of this.children)(t instanceof e.Mesh||t instanceof Z)&&t.geometry.dispose();this.clear()}dispose(){this.reset(),t.Module.destroy(this.debugDrawImpl),this.pointGeometry.dispose(),this.triMaterial.dispose(),this.pointMaterial.dispose(),this.lineMaterial.dispose()}vertex(t,e,n,i){const r=(i>>16&255)/255,s=(i>>8&255)/255,a=(255&i)/255,o=(i>>24&255)/255;this.currentVertices.push([t,e,n,r,s,a,o])}endPoints(){const t=this.pointGeometry,n=new e.InstancedMesh(t,this.pointMaterial,this.currentVertices.length);for(let t=0;t<this.currentVertices.length;t++){const[i,r,s,a,o,l]=this.currentVertices[t];n.setMatrixAt(t,(new e.Matrix4).setPosition(i,r,s)),n.setColorAt(t,tt.setRGB(a,o,l))}n.instanceMatrix.needsUpdate=!0,this.add(n)}endLines(){const t=new R,e=[],n=[];for(let t=0;t<this.currentVertices.length;t+=2){const[i,r,s,a,o,l]=this.currentVertices[t],[d,c,h,u,p,f]=this.currentVertices[t+1];e.push(i,r,s),e.push(d,c,h),n.push(a,o,l),n.push(u,p,f)}t.setPositions(e),t.setColors(n);const i=new Z(t,this.lineMaterial);this.add(i)}endTris(){const t=new e.BufferGeometry,n=new Float32Array(3*this.currentVertices.length),i=new Float32Array(3*this.currentVertices.length);for(let t=0;t<this.currentVertices.length;t++){const[e,r,s,a,o,l]=this.currentVertices[t];n[3*t+0]=e,n[3*t+1]=r,n[3*t+2]=s,i[3*t+0]=a,i[3*t+1]=o,i[3*t+2]=l}t.setAttribute("position",new e.BufferAttribute(n,3)),t.setAttribute("color",new e.BufferAttribute(i,3));const r=this.triMaterial,s=new e.Mesh(t,r);this.add(s)}endQuads(){const t=[],n=[];for(let e=0;e<this.currentVertices.length;e+=4){const i=[this.currentVertices[e],this.currentVertices[e+1],this.currentVertices[e+2],this.currentVertices[e],this.currentVertices[e+2],this.currentVertices[e+3]];for(const[e,r,s,a,o,l]of i)t.push(e,r,s),n.push(a,o,l)}const i=new e.BufferGeometry;i.setAttribute("position",new e.BufferAttribute(new Float32Array(t),3)),i.setAttribute("color",new e.BufferAttribute(new Float32Array(n),3));const r=this.triMaterial,s=new e.Mesh(i,r);this.add(s)}}class nt extends b{agentMeshes=new Map;constructor({crowd:t,agentMaterial:e}){super(),this.recastCrowd=t,this.agentMaterial=e??new x({color:"red"}),this.update()}update(){const t=this.recastCrowd.getAgents(),e=new Set(this.agentMeshes.keys());for(const n of t){e.delete(n.agentIndex);const t=n.position(),r=n.velocity();let s=this.agentMeshes.get(n.agentIndex);void 0===s?(s=this.createAgentMesh(n),this.add(s),this.agentMeshes.set(n.agentIndex,s)):this.updateAgentGeometry(s,n),s.position.set(t.x,t.y+n.height/2,t.z),s.lookAt((new i).copy(s.position).add(r))}for(const t of e){const e=this.agentMeshes.get(t);e&&(this.remove(e),this.agentMeshes.delete(t))}}createAgentMesh(t){const e=new y;return e.material=this.agentMaterial,this.updateAgentGeometry(e,t),e.userData={radius:t.radius,height:t.height},e}updateAgentGeometry(t,e){if(t.userData.radius!==e.radius||t.userData.height!==e.height){const n=new D(e.radius,e.radius,e.height);t.geometry.dispose(),t.geometry=n,t.userData.radius=e.radius,t.userData.height=e.height}}}class it extends b{constructor({navMesh:t,navMeshMaterial:e}){super(),this.navMesh=t,this.geometry=new M,this.navMeshMaterial=e||new x({color:"orange",transparent:!0,opacity:.7,depthWrite:!1}),this.update(),this.mesh=new y(this.geometry,this.navMeshMaterial),this.add(this.mesh)}update(){const[t,e]=this.navMesh.getDebugNavMesh();this.geometry.setAttribute("position",new S(Float32Array.from(t),3)),this.geometry.setIndex(new S(Uint32Array.from(e),1)),this.geometry.computeVertexNormals()}}class rt extends b{constructor({offMeshConnections:t,entryCircleMaterial:e,exitCircleMaterial:n,lineMaterial:i}){super(),this.offMeshConnections=t??[],this.entryCircleMaterial=e??new x({color:"green"}),this.exitCircleMaterial=n??new x({color:"blue"}),this.lineMaterial=i??new A({color:"red"}),this.update()}update(){this.clear();for(const t of this.offMeshConnections){const e=new _(t.radius,16),n=new y(e,this.entryCircleMaterial);n.position.copy(t.startPosition),n.position.y+=.001,n.rotation.x=-Math.PI/2,this.add(n);const r=new y(e,t.bidirectional?this.entryCircleMaterial:this.exitCircleMaterial);r.position.copy(t.endPosition),r.position.y+=.001,r.rotation.x=-Math.PI/2,this.add(r);const s=(new i).copy(t.startPosition),a=(new i).copy(t.endPosition),o=(new i).addVectors(s,a).multiplyScalar(.5);o.y*=1.2;const l=new E([s,o,a]).getPoints(50),d=(new M).setFromPoints(l),c=new z(d,this.lineMaterial);this.add(c)}}}class st extends b{obstacleMeshes=new Map;constructor({tileCache:t,obstacleMaterial:e}){super(),this.tileCache=t,this.obstacleMaterial=e||new x({color:"red",wireframe:!0,wireframeLinewidth:2}),this.update()}update(){const t=new Set(this.obstacleMeshes.keys());for(const[,e]of this.tileCache.obstacles){const n=this.obstacleMeshes.get(e);if(t.delete(e),!n){const{position:t}=e,n=new y(void 0,this.obstacleMaterial);if(n.position.copy(t),"box"===e.type){const{halfExtents:t,angle:i}=e;n.geometry=new U(2*t.x,2*t.y,2*t.z),n.rotation.y=i}else{if("cylinder"!==e.type)throw new Error(`Unknown obstacle type: ${e}`);{const{radius:t,height:i}=e;n.geometry=new D(t,t,i,16),n.position.y+=i/2}}this.add(n),this.obstacleMeshes.set(e,n)}}for(const e of t){const t=this.obstacleMeshes.get(e);t&&(this.remove(t),this.obstacleMeshes.delete(e))}}}const at=new i,ot=t=>{const e=[];for(const n of t){const t=n.geometry.attributes.position;if(!t||3!==t.itemSize)continue;let i=n;const r=n.geometry.getIndex()?.array;if(void 0===r){i=i.clone(),i.geometry=n.geometry.clone();const e=[];for(let n=0;n<t.count;n++)e.push(n);i.geometry.setIndex(e)}e.push(i)}const n=[],i=[],r={};let s=0;for(const t of e){t.updateMatrixWorld();const e=t.geometry.attributes.position.array,a=t.geometry.getIndex().array;for(let o=0;o<a.length;o++){const l=3*a[o],d=at.set(e[l],e[l+1],e[l+2]);t.localToWorld(d);const c=`${d.x}_${d.y}_${d.z}`;let h=r[c];h||(r[c]=h=s,n.push(d.x,d.y,d.z),s++),i.push(h)}}return[Float32Array.from(n),Uint32Array.from(i)]},lt=(t,e={},n=!1)=>{const[i,r]=ot(t);return C(i,r,e,n)},dt=(t,e={},n=!1)=>{const[i,r]=ot(t);return I(i,r,e,n)},ct=(t,e={},n=!1)=>{const[i,r]=ot(t);return P(i,r,e,n)};export{nt as CrowdHelper,et as DebugDrawer,it as NavMeshHelper,rt as OffMeshConnectionsHelper,st as TileCacheHelper,ot as getPositionsAndIndices,lt as threeToSoloNavMesh,ct as threeToTileCache,dt as threeToTiledNavMesh};
//# sourceMappingURL=index.mjs.map
